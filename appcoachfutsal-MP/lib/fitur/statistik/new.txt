import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';

class StatistikPemainPage extends StatefulWidget {
  const StatistikPemainPage({super.key});

  @override
  _StatistikPemainPageState createState() => _StatistikPemainPageState();
}

class _StatistikPemainPageState extends State<StatistikPemainPage> {
  String? selectedPosition;
  String? selectedPlayer;
  DateTime? selectedJadwal;
  String? selectedDateDropdown; // Untuk dropdown di detail
  List<String> posisiList = [];
  List<String> pemainList = [];
  List<DateTime> jadwalList = [];
  List<Map<String, dynamic>> statistikList = [];

  // Controllers untuk berbagai statistik pemain
  Map<String, TextEditingController> controllers = {};

  @override
  void initState() {
    super.initState();
    _loadPosisi();
    final List<String> allFields = [
      // Aspek Fisik
      'endurance', 'strength', 'weight', 'height',
      // Aspek Defence
      'bodyBalance', 'intersepi', 'aggression', 'composure',
      // Aspek Attack
      'finishing', 'shooting', 'ballControl', 'crossing',
      // Aspek Tactical
      'jumlahGol', 'shootingTactical', 'ballControlTactical', 'bodyBalanceTactical',
      // Aspek Emotional
      'kedisiplinan', 'motivasi', 'teamwork', 'kontrolEmosi',
    ];
    for (var field in allFields) {
      controllers[field] = TextEditingController(text: '0');
    }
  }

  Future<void> _loadPosisi() async {
    final snapshot = await FirebaseFirestore.instance.collection('players').get();
    final posisiSet = <String>{};
    for (var doc in snapshot.docs) {
      if (doc['position'] != null && doc['position'].toString().isNotEmpty) {
        posisiSet.add(doc['position']);
      }
    }
    setState(() {
      posisiList = posisiSet.toList();
    });
  }

  Future<void> _loadPemain() async {
    if (selectedPosition == null) return;
    final snapshot = await FirebaseFirestore.instance
        .collection('players')
        .where('position', isEqualTo: selectedPosition)
        .get();
    setState(() {
      pemainList = snapshot.docs.map((e) => e['name'] as String).toList();
    });
  }

  // Jadwal hanya untuk pemain terpilih
  Future<void> _loadJadwalList() async {
    if (selectedPlayer == null) {
      setState(() {
        jadwalList = [];
      });
      return;
    }
    final snapshot = await FirebaseFirestore.instance
        .collection('statistik_pemain')
        .where('player', isEqualTo: selectedPlayer)
        .orderBy('jadwal', descending: true)
        .get();
    final jadwalSet = <DateTime>{};
    for (var doc in snapshot.docs) {
      final ts = doc['jadwal'];
      if (ts is Timestamp) {
        jadwalSet.add(ts.toDate());
      }
    }
    setState(() {
      jadwalList = jadwalSet.toList()..sort((a, b) => b.compareTo(a));
    });
  }

  Future<void> _loadStatistikForDetail() async {
    if (selectedPlayer == null || selectedDateDropdown == null || selectedPosition == null) return;
    // Cari jadwal yang sesuai
    DateTime? jadwal;
    for (final dt in jadwalList) {
      if (DateFormat('dd MMMM yyyy').format(dt) == selectedDateDropdown) {
        jadwal = dt;
        break;
      }
    }
    if (jadwal == null) return;
    final snapshot = await FirebaseFirestore.instance
        .collection('statistik_pemain')
        .where('player', isEqualTo: selectedPlayer)
        .where('position', isEqualTo: selectedPosition)
        .where('jadwal', isEqualTo: Timestamp.fromDate(jadwal))
        .get();
    setState(() {
      statistikList = snapshot.docs.map((e) => e.data()).toList();
    });
  }

  @override
  void dispose() {
    for (var controller in controllers.values) {
      controller.dispose();
    }
    super.dispose();
  }

  Future<void> _selectJadwalDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: selectedJadwal ?? DateTime.now(),
      firstDate: DateTime(2023, 1),
      lastDate: DateTime(2100),
    );
    if (picked != null) {
      setState(() {
        selectedJadwal = picked;
      });
    }
  }

  Future<void> _submitStatistik() async {
    if (selectedPosition == null || selectedPlayer == null || selectedJadwal == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Lengkapi semua input termasuk jadwal!')),
      );
      return;
    }
    // Cek apakah sudah ada data untuk kombinasi posisi, pemain, dan jadwal ini
    final existing = await FirebaseFirestore.instance
        .collection('statistik_pemain')
        .where('position', isEqualTo: selectedPosition)
        .where('player', isEqualTo: selectedPlayer)
        .where('jadwal', isEqualTo: Timestamp.fromDate(selectedJadwal!))
        .get();

    if (existing.docs.isNotEmpty) {
      // Update data jika sudah ada
      await FirebaseFirestore.instance
          .collection('statistik_pemain')
          .doc(existing.docs.first.id)
          .update({
        'statistik': controllers.map((k, v) => MapEntry(k, v.text)),
        'updatedAt': FieldValue.serverTimestamp(),
      });
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Statistik berhasil diupdate')),
      );
    } else {
      // Tambah data baru jika belum ada
      final data = {
        'position': selectedPosition,
        'player': selectedPlayer,
        'jadwal': Timestamp.fromDate(selectedJadwal!),
        'createdAt': FieldValue.serverTimestamp(),
        'statistik': controllers.map((k, v) => MapEntry(k, v.text)),
      };
      await FirebaseFirestore.instance.collection('statistik_pemain').add(data);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Statistik berhasil disimpan')),
      );
    }
    await _loadJadwalList();
    setState(() {
      // Reset input
      for (var c in controllers.values) {
        c.text = '0';
      }
      selectedJadwal = null;
      selectedDateDropdown = null;
      statistikList = [];
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: DefaultTabController(
        length: 3,
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Header dengan tombol kembali
                Row(
                  children: [
                    IconButton(
                      icon: Icon(Icons.arrow_back, color: Colors.grey),
                      onPressed: () {
                        Navigator.pop(context);
                      },
                    ),
                    SizedBox(width: 8),
                    Text(
                      'STATISTIK PEMAIN',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 20),

                // Posisi (Dari Firestore)
                Text('Posisi', style: TextStyle(fontWeight: FontWeight.w500)),
                SizedBox(height: 8),
                Container(
                  decoration: BoxDecoration(
                    color: Colors.teal[50],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: DropdownButtonFormField<String>(
                    value: selectedPosition,
                    decoration: InputDecoration(
                      hintText: 'Pilih Posisi',
                      border: InputBorder.none,
                      contentPadding: EdgeInsets.symmetric(horizontal: 16),
                    ),
                    icon: Icon(Icons.keyboard_arrow_down),
                    items: posisiList
                        .map((String position) {
                      return DropdownMenuItem<String>(
                        value: position,
                        child: Text(position),
                      );
                    }).toList(),
                    onChanged: (String? newValue) async {
                      setState(() {
                        selectedPosition = newValue;
                        selectedPlayer = null;
                        pemainList = [];
                        selectedJadwal = null;
                        selectedDateDropdown = null;
                        jadwalList = [];
                        statistikList = [];
                      });
                      await _loadPemain();
                    },
                  ),
                ),
                SizedBox(height: 16),

                // Nama Pemain (Dari Firestore)
                Text('Nama Pemain', style: TextStyle(fontWeight: FontWeight.w500)),
                SizedBox(height: 8),
                Container(
                  decoration: BoxDecoration(
                    color: Colors.teal[50],
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: DropdownButtonFormField<String>(
                    value: selectedPlayer,
                    decoration: InputDecoration(
                      hintText: 'Pilih Pemain',
                      border: InputBorder.none,
                      contentPadding: EdgeInsets.symmetric(horizontal: 16),
                    ),
                    icon: Icon(Icons.keyboard_arrow_down),
                    items: pemainList
                        .map((String player) {
                      return DropdownMenuItem<String>(
                        value: player,
                        child: Text(player),
                      );
                    }).toList(),
                    onChanged: (String? newValue) async {
                      setState(() {
                        selectedPlayer = newValue;
                        selectedJadwal = null;
                        selectedDateDropdown = null;
                        jadwalList = [];
                        statistikList = [];
                      });
                      await _loadJadwalList();
                    },
                  ),
                ),
                SizedBox(height: 16),

                // Jadwal Pertandingan (Date Picker)
                Text('Jadwal Pertandingan', style: TextStyle(fontWeight: FontWeight.w500)),
                SizedBox(height: 8),
                GestureDetector(
                  onTap: () => _selectJadwalDate(context),
                  child: Container(
                    width: double.infinity,
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 14),
                    decoration: BoxDecoration(
                      color: Colors.teal[50],
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Text(
                      selectedJadwal != null
                          ? DateFormat('dd MMMM yyyy').format(selectedJadwal!)
                          : 'Pilih Jadwal Pertandingan',
                      style: TextStyle(
                        color: selectedJadwal != null ? Colors.black : Colors.grey,
                        fontSize: 16,
                      ),
                    ),
                  ),
                ),
                SizedBox(height: 16),

                // Tab untuk melihat berbagai jenis tampilan statistik
                TabBar(
                  tabs: [
                    Tab(text: 'Input Statistik'),
                    Tab(text: 'Detail Attack'),
                    Tab(text: 'Detail Defence'),
                  ],
                  labelColor: Colors.blue,
                  unselectedLabelColor: Colors.grey,
                  indicatorColor: Colors.blue,
                ),

                Expanded(
                  child: TabBarView(
                    children: [
                      // Tab 1: Input Statistik (Semua aspek)
                      SingleChildScrollView(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            SizedBox(height: 16),

                            // Aspek Fisik
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.green[300],
                                borderRadius: BorderRadius.circular(20),
                              ),
                              padding: EdgeInsets.symmetric(horizontal: 16, vertical: 6),
                              child: Text(
                                'Aspek Fisik',
                                style: TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                            SizedBox(height: 8),

                            statisticGrid([
                              {'label': 'Endurance', 'controller': controllers['endurance']!},
                              {'label': 'Strength', 'controller': controllers['strength']!},
                              {'label': 'Weight', 'controller': controllers['weight']!},
                              {'label': 'Height', 'controller': controllers['height']!},
                            ]),

                            SizedBox(height: 16),

                            // Aspek Defence
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.green[300],
                                borderRadius: BorderRadius.circular(20),
                              ),
                              padding: EdgeInsets.symmetric(horizontal: 16, vertical: 6),
                              child: Text(
                                'Aspek Defence',
                                style: TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                            SizedBox(height: 8),

                            statisticGrid([
                              {'label': 'Body Balance', 'controller': controllers['bodyBalance']!},
                              {'label': 'Intersepi', 'controller': controllers['intersepi']!},
                              {'label': 'Aggression', 'controller': controllers['aggression']!},
                              {'label': 'Composure', 'controller': controllers['composure']!},
                            ]),

                            SizedBox(height: 16),

                            // Aspek Attack
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.green[300],
                                borderRadius: BorderRadius.circular(20),
                              ),
                              padding: EdgeInsets.symmetric(horizontal: 16, vertical: 6),
                              child: Text(
                                'Aspek Attack',
                                style: TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                            SizedBox(height: 8),

                            statisticGrid([
                              {'label': 'Finishing', 'controller': controllers['finishing']!},
                              {'label': 'Shooting', 'controller': controllers['shooting']!},
                              {'label': 'Ball Control', 'controller': controllers['ballControl']!},
                              {'label': 'Crossing', 'controller': controllers['crossing']!},
                            ]),

                            SizedBox(height: 16),

                            // Aspek Tactical
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.green[300],
                                borderRadius: BorderRadius.circular(20),
                              ),
                              padding: EdgeInsets.symmetric(horizontal: 16, vertical: 6),
                              child: Text(
                                'Aspek Tactical',
                                style: TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                            SizedBox(height: 8),

                            statisticGrid([
                              {'label': 'Jumlah Gol', 'controller': controllers['jumlahGol']!},
                              {'label': 'Shooting', 'controller': controllers['shootingTactical']!},
                              {'label': 'Ball Control', 'controller': controllers['ballControlTactical']!},
                              {'label': 'Body Balance', 'controller': controllers['bodyBalanceTactical']!},
                            ]),

                            SizedBox(height: 16),

                            // Aspek Emotional
                            Container(
                              decoration: BoxDecoration(
                                color: Colors.green[300],
                                borderRadius: BorderRadius.circular(20),
                              ),
                              padding: EdgeInsets.symmetric(horizontal: 16, vertical: 6),
                              child: Text(
                                'Aspek Emotional',
                                style: TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ),
                            SizedBox(height: 8),

                            statisticGrid([
                              {'label': 'Kedisiplinan', 'controller': controllers['kedisiplinan']!},
                              {'label': 'Motivasi & Semangat', 'controller': controllers['motivasi']!},
                              {'label': 'Teamwork', 'controller': controllers['teamwork']!},
                              {'label': 'Kontrol Emosi', 'controller': controllers['kontrolEmosi']!},
                            ]),

                            SizedBox(height: 24),

                            // Tombol Submit
                            SizedBox(
                              width: double.infinity,
                              child: ElevatedButton(
                                onPressed: _submitStatistik,
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.black,
                                  padding: EdgeInsets.symmetric(vertical: 16),
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                ),
                                child: Text(
                                  'Submit Penilaian',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ),

                            SizedBox(height: 24),
                          ],
                        ),
                      ),

                      // Tab 2: Detail Attack
                      detailStatistikView("Attack"),

                      // Tab 3: Detail Defence
                      detailStatistikView("Defence"),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // Helper widget untuk membuat grid statistik
  Widget statisticGrid(List<Map<String, dynamic>> items) {
    return GridView.count(
      shrinkWrap: true,
      crossAxisCount: 2,
      childAspectRatio: 2.5,
      crossAxisSpacing: 16,
      mainAxisSpacing: 16,
      physics: NeverScrollableScrollPhysics(),
      children: items.map((item) {
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(item['label']),
            SizedBox(height: 4),
            Container(
              decoration: BoxDecoration(
                color: Colors.teal[50],
                borderRadius: BorderRadius.circular(8),
              ),
              child: TextField(
                controller: item['controller'],
                keyboardType: TextInputType.number,
                decoration: InputDecoration(
                  border: InputBorder.none,
                  hintText: '0',
                  contentPadding: EdgeInsets.symmetric(horizontal: 16),
                ),
              ),
            ),
          ],
        );
      }).toList(),
    );
  }

  // Helper widget untuk membuat tampilan detail statistik
  Widget detailStatistikView(String category) {
    // Dropdown jadwal pertandingan
    final jadwalDropdownItems = jadwalList
        .map((dt) => DateFormat('dd MMMM yyyy').format(dt))
        .toList();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SizedBox(height: 16),

        // Dropdown untuk memilih pertandingan berdasarkan tanggal
        Container(
          decoration: BoxDecoration(
            color: Colors.teal[50],
            borderRadius: BorderRadius.circular(8),
          ),
          child: DropdownButtonFormField<String>(
            value: selectedDateDropdown,
            decoration: InputDecoration(
              hintText: 'Pilih Jadwal Pertandingan',
              border: InputBorder.none,
              contentPadding: EdgeInsets.symmetric(horizontal: 16),
            ),
            icon: Icon(Icons.keyboard_arrow_down),
            items: jadwalDropdownItems
                .map((String date) {
              return DropdownMenuItem<String>(
                value: date,
                child: Text(date),
              );
            }).toList(),
            onChanged: (String? newValue) async {
              setState(() {
                selectedDateDropdown = newValue;
              });
              await _loadStatistikForDetail();
            },
          ),
        ),

        SizedBox(height: 24),

        // Tampilkan data statistik dari Firestore sesuai jadwal & player & posisi
        statistikList.isEmpty
            ? Center(
                child: Padding(
                  padding: const EdgeInsets.all(24.0),
                  child: Text(
                    'Belum ada data statistik untuk jadwal ini.',
                    style: TextStyle(color: Colors.grey),
                  ),
                ),
              )
            : ListView.builder(
                shrinkWrap: true,
                physics: NeverScrollableScrollPhysics(),
                itemCount: statistikList.length,
                itemBuilder: (context, idx) {
                  final stat = statistikList[idx];
                  final Map<String, dynamic> statistik = stat['statistik'] ?? {};
                  // Filter statistik sesuai kategori
                  final Map<String, String> kategoriMap = {
                    "Attack": "finishing,shooting,ballControl,crossing",
                    "Defence": "bodyBalance,intersepi,aggression,composure",
                  };
                  final kategoriFields = kategoriMap[category]?.split(',') ?? [];
                  return Card(
                    margin: EdgeInsets.only(bottom: 12),
                    child: Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: kategoriFields.map((field) {
                          return statistik[field] != null
                              ? buildStatisticList(field, statistik[field])
                              : SizedBox();
                        }).toList(),
                      ),
                    ),
                  );
                },
              ),
      ],
    );
  }

  Widget radarChartWidget(List<String> labels, List<double> values) {
    return SizedBox(
      height: 250,
      child: RadarChart(
        RadarChartData(
          radarShape: RadarShape.polygon,
          titleTextStyle: const TextStyle(fontSize: 12),
          getTitle: (index, _) {
            return RadarChartTitle(text: labels[index % labels.length]);
          },
          dataSets: [
            RadarDataSet(
              fillColor: Colors.blue.withOpacity(0.3),
              borderColor: Colors.blue,
              entryRadius: 3,
              dataEntries: values.map((v) => RadarEntry(value: v)).toList(),
            ),
          ],
        ),
      ),
    );
  }

  // Helper widget untuk menampilkan baris statistik individual
  Widget buildStatisticList(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        children: [
          Expanded(
            flex: 2,
            child: Text(
              label,
              style: TextStyle(
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
          Expanded(
            flex: 1,
            child: Text(
              value,
              style: TextStyle(
                fontWeight: FontWeight.w500,
              ),
              textAlign: TextAlign.right,
            ),
          ),
        ],
      ),
    );
  }
}